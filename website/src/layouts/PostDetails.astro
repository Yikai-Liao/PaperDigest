---
import { render, type CollectionEntry } from "astro:content";
import Layout from "@/layouts/Layout.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import Tag from "@/components/Tag.astro";
import Datetime from "@/components/Datetime.astro";
import EditPost from "@/components/EditPost.astro";
import ShareLinks from "@/components/ShareLinks.astro";
import LinkButton from "@/components/LinkButton.astro";
import Comments from "@/components/Comments";
import { getPath } from "@/utils/getPath";
import { slugifyStr } from "@/utils/slugify";
import { getPreferenceEmoji, SCORE_COLORS, SCORE_THRESHOLDS } from "@/utils/preference";
import IconChevronLeft from "@/assets/icons/IconChevronLeft.svg";
import IconChevronRight from "@/assets/icons/IconChevronRight.svg";
import { SITE } from "@/config";

export interface Props {
  post: CollectionEntry<"blog">;
  posts: CollectionEntry<"blog">[];
}

const { post, posts } = Astro.props;

const {
  title,
  author,
  description,
  ogImage: initOgImage,
  canonicalURL,
  pubDatetime,
  modDatetime,
  timezone,
  tags,
  hideEditPost,
  score,
  preference,
} = post.data;

// 从文章ID中提取arXiv ID
const arxivId = post.id;
// 构建arXiv链接
const arxivUrl = `https://arxiv.org/abs/${arxivId}`;

const { Content } = await render(post);

let ogImageUrl: string | undefined;

// Determine OG image source
if (typeof initOgImage === "string") {
  ogImageUrl = initOgImage; // Remote OG image (absolute URL)
} else if (initOgImage?.src) {
  ogImageUrl = initOgImage.src; // Local asset
}

// Use dynamic OG image if enabled and no remote|local ogImage
if (!ogImageUrl && SITE.dynamicOgImage) {
  ogImageUrl = `${getPath(post.id, post.filePath)}/index.png`;
}

// Resolve OG image URL (or fallback to SITE.ogImage / default `og.png`)
const ogImage = ogImageUrl
  ? new URL(ogImageUrl, Astro.url.origin).href
  : undefined;

const layoutProps = {
  title: `${title} | ${SITE.title}`,
  author,
  description,
  pubDatetime,
  modDatetime,
  canonicalURL,
  ogImage,
  scrollSmooth: true,
};

/* ========== Prev/Next Posts ========== */

const allPosts = posts.map(({ data: { title }, id }) => ({
  slug: id,
  title,
}));

const currentPostIndex = allPosts.findIndex(a => a.slug === post.id);

const prevPost = currentPostIndex !== 0 ? allPosts[currentPostIndex - 1] : null;
const nextPost =
  currentPostIndex !== allPosts.length ? allPosts[currentPostIndex + 1] : null;

// 格式化分数（乘以 100，保留两位小数）
const formattedScore = score !== undefined ? (score * 100).toFixed(2) : null;

// 使用共享函数获取表情符号
const preferenceEmoji = getPreferenceEmoji(preference);
---

<Layout {...layoutProps}>
  <Header />
  <div class="flex items-center justify-between w-full max-w-3xl mx-auto mt-8 px-4">
    <LinkButton id="back-button" href="/" class="text-lg flex items-center whitespace-nowrap opacity-75 hover:opacity-100 hover:underline">
      <IconChevronLeft class="inline-block size-6" />
      <span>Go back</span>
    </LinkButton>
    <a
      href={arxivUrl}
      target="_blank"
      rel="noopener noreferrer"
      class="text-lg flex items-center whitespace-nowrap opacity-75 hover:opacity-100 hover:underline hover:text-accent"
    >
      {arxivId} <img src="/arxiv-logomark-small.svg" alt="arXiv logo" class="ml-1.5 inline-block size-6" />
    </a>
  </div>
  <main
    id="main-content"
    class:list={[
      "mx-auto w-full max-w-3xl px-4 pb-12",
      { "mt-8": !SITE.showBackButton },
    ]}
    data-pagefind-body
  >
    <h1
      transition:name={slugifyStr(title)}
      class="inline-block text-2xl font-bold text-accent sm:text-3xl"
    >
      {title}
    </h1>
    <div class="flex items-center justify-between gap-4">
      <div class="flex items-center gap-4">
        <Datetime {pubDatetime} {modDatetime} {timezone} size="lg" class="my-2" />
        <EditPost class="max-sm:hidden" {hideEditPost} {post} />
      </div>
      {(formattedScore || preferenceEmoji) && (
        <div class="flex items-center gap-2 text-lg">
          {formattedScore && (
            <span class="score-value font-medium">{formattedScore}</span>
          )}
          {preferenceEmoji && <span class="text-xl">{preferenceEmoji}</span>}
        </div>
      )}
    </div>
    <article id="article" class="mx-auto prose mt-8 max-w-3xl">
      <Content />
    </article>

    <hr class="my-8 border-dashed" />

    <EditPost class="sm:hidden" {hideEditPost} {post} />

    <ul class="mt-4 mb-8 sm:my-8">
      {tags.map(tag => <Tag tag={slugifyStr(tag)} tagName={tag} />)}
    </ul>

    <div
      class="flex flex-col items-center justify-between gap-6 sm:flex-row sm:items-end sm:gap-4"
    >
      <ShareLinks />

      <button
        id="back-to-top"
        class="focus-outline py-1 whitespace-nowrap hover:opacity-75"
      >
        <IconChevronLeft class="inline-block rotate-90" />
        <span>Back to Top</span>
      </button>
    </div>

    <hr class="my-6 border-dashed" />

    <!-- Previous/Next Post Buttons -->
    <div data-pagefind-ignore class="grid grid-cols-1 gap-6 sm:grid-cols-2">
      {
        prevPost && (
          <a
            href={`/posts/${prevPost.slug}`}
            class="flex w-full gap-1 hover:opacity-75"
          >
            <IconChevronLeft class="inline-block flex-none" />
            <div>
              <span>Previous Post</span>
              <div class="text-sm text-accent/85">{prevPost.title}</div>
            </div>
          </a>
        )
      }
      {
        nextPost && (
          <a
            href={`/posts/${nextPost.slug}`}
            class="flex w-full justify-end gap-1 text-right hover:opacity-75 sm:col-start-2"
          >
            <div>
              <span>Next Post</span>
              <div class="text-sm text-accent/85">{nextPost.title}</div>
            </div>
            <IconChevronRight class="inline-block flex-none" />
          </a>
        )
      }
    </div>

    <div class="mt-8 flex flex-col-reverse items-center justify-between sm:flex-row">
      {!hideEditPost && <EditPost post={post} />}
      <ShareLinks />
    </div>

    <!-- 使用 Comments 组件替换 Giscus 脚本标签 -->
    <Comments client:only="react" />

    <hr class="my-6 border-dashed" />
  </main>
  <Footer />
</Layout>

<!-- 使用全局 site.js 中的功能而不是内联脚本 -->
<!-- 
原来的内联脚本已移至site.js中的setupPostDetailsPage函数
以下为删除的功能:
1. createProgressBar() - 现在由site.js处理
2. updateScrollProgress() - 现在由site.js处理
3. addHeadingLinks() - 现在由site.js处理
4. attachCopyButtons() - 现在由site.js处理
5. backToTop() - 现在由site.js处理
-->

<script is:inline define:vars={{ SCORE_COLORS, SCORE_THRESHOLDS }}>
  document.addEventListener('astro:page-load', () => {
    updateScoreColors();
  });
</script>
